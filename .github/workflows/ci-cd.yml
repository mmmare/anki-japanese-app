name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: csv-to-anki-app/frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd csv-to-anki-app/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python tests
      run: |
        cd csv-to-anki-app/backend
        python -m pytest tests/ -v || echo "No tests found, skipping..."

    - name: Install Node.js dependencies
      run: |
        cd csv-to-anki-app/frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd csv-to-anki-app/frontend
        npm test -- --coverage --watchAll=false

    - name: Build frontend
      run: |
        cd csv-to-anki-app/frontend
        npm run build

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend

    - name: Extract metadata (tags, labels) for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Stop existing containers
      run: |
        docker-compose down || true

    - name: Pull latest images
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:main
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:main

    - name: Update docker-compose for production
      run: |
        sed -i 's|build:|image:|g' docker-compose.yml
        sed -i 's|context: .|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:main|g' docker-compose.yml
        sed -i 's|dockerfile: Dockerfile.backend||g' docker-compose.yml
        sed -i 's|dockerfile: Dockerfile.frontend|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:main|g' docker-compose.yml

    - name: Start application
      run: |
        docker-compose up -d

    - name: Health check
      run: |
        sleep 30
        curl -f http://localhost:80 || exit 1
        curl -f http://localhost:8000/docs || exit 1

    - name: Clean up old images
      run: |
        docker image prune -f
