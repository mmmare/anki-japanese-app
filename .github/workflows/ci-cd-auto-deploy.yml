name: CI/CD with VPS Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: csv-to-anki-app/frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd csv-to-anki-app/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python tests
      run: |
        cd csv-to-anki-app/backend
        python -m pytest tests/ -v || echo "No tests found, skipping..."

    - name: Install Node.js dependencies
      run: |
        cd csv-to-anki-app/frontend
        npm install --legacy-peer-deps

    - name: Run frontend tests
      run: |
        cd csv-to-anki-app/frontend
        npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Build frontend
      run: |
        cd csv-to-anki-app/frontend
        npm run build

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend

    - name: Extract metadata (tags, labels) for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && vars.VPS_DEPLOYMENT_ENABLED == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          echo "🚀 Starting automated deployment on VPS..."
          
          # Navigate to app directory
          cd ~/anki-japanese-app || cd /var/www/anki-japanese-app || {
            echo "❌ App directory not found. Running initial setup..."
            git clone https://github.com/${{ github.repository }}.git ~/anki-japanese-app
            cd ~/anki-japanese-app
          }
          
          # Pull latest changes
          echo "📥 Pulling latest code..."
          git pull origin main
          
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          docker-compose down || true
          
          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker system prune -f
          
          # Deploy application
          echo "🚀 Deploying application..."
          docker-compose up -d --build --force-recreate
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 45
          
          # Health check
          echo "🏥 Performing health checks..."
          if curl -f http://localhost/health &>/dev/null || curl -f http://localhost:8080/health &>/dev/null; then
            echo "✅ Frontend health check passed"
          else
            echo "⚠️ Frontend health check failed, checking logs..."
            docker logs anki-nginx --tail=10 || true
          fi
          
          if curl -f http://localhost:8000/health &>/dev/null; then
            echo "✅ Backend health check passed"
          else
            echo "⚠️ Backend health check failed, checking logs..."
            docker logs anki-backend --tail=10 || true
          fi
          
          # Final status
          echo "📊 Final container status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo "✅ Automated deployment completed!"
          echo "🌐 App should be accessible at: http://$(curl -s ifconfig.me)"
